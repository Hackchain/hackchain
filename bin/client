#!/usr/bin/env node
'use strict';

const hackchain = require('../');

const assert = require('assert');
const fs = require('fs');
const prompt = require('prompt');

const yargs = require('yargs')
    .usage('Usage: $0 --server ... --block <hash>\n' +
           '       $0 --server ... --tx <hash>\n' +
           '       $0 --server ... --spend example.tx\n' +
           '       $0 --server ... --info\n' +
           '       $0 --server ... --unspent')
    .alias('s', 'server')
    .describe('s', 'server address')
    .describe('block', 'block hash')
    .describe('tx', 'tx hash')
    .describe('spend', 'path to TX description')
    .describe('info', 'fetch server info')
    .describe('unspent', 'get the list of top unspent coins')
    .demand([ 'server' ])
const argv = yargs.argv;

const client = new hackchain.Client(argv.server);

if (argv.block) {
  client.getBlock(argv.block, (err, block) => {
    if (err)
      throw err;

    console.log(block);
  });
  return;
}

if (argv.tx) {
  client.getTX(argv.tx, (err, tx) => {
    if (err)
      throw err;

    console.log(tx);
  });
  return;
}

if (argv.spend) {
  const text = fs.readFileSync(argv.spend).toString();
  client.parseTX(text, (err, tx) => {
    if (err)
      throw err;

    console.log('Parsed following TX:');
    console.log(tx);

    prompt.start();
    prompt.get({
      properties: {
        'Send to server? (yes or no)': {
          pattern: /^(yes|no)$/,
          required: true
        }
      }
    }, (err, result) => {
      if (err)
        throw err;

      // TODO(indutny): lame
      if (result['Send to server? (yes or no)'] !== 'yes')
        return console.log('... cancelled');

      client.spendTX(tx, (err) => {
        if (err)
          throw err;

        console.log('!!! Success, tx: %s !!!', tx.hash().toString('hex'));
        console.log('NOTE: server must mint a new block before ' +
                    'this TX will be available');
      });
    });
  });
  return;
}

if (argv.info) {
  client.getInfo((err, info) => {
    if (err)
      throw err;

    console.log(info);
  });
  return;
}

if (argv.unspent) {
  client.getUnspent((err, unspent) => {
    if (err)
      throw err;

    console.log(unspent);
  });
  return;
}
yargs.showHelp();
